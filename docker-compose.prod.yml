services:
  django-backend-prod:
    build:
      context: ./
      dockerfile: backend/Dockerfile
    container_name: django-backend-prod
    env_file:
      - ".env"
    volumes:
      - "./backend:/backend"
      - "./backend/staticfiles:/backend/staticfiles"
      - "./backend/media:/backend/media"
    command: ["sh", "-c", "python manage.py collectstatic --noinput && python manage.py migrate && gunicorn --bind 0.0.0.0:8000 sheriff_crandy_project.wsgi:application"]      
    networks:
      - "sc_backend_network"

  vuejs-frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vuejs-frontend-prod
    env_file:
      - "./frontend/.env"
    volumes:
      - "./frontend:/frontend"
      - "node_modules:/frontend/node_modules"
    command: ["sh", "-c", "npm run build"]
    depends_on:
      - django-backend-prod
    networks:
      - "sc_backend_network"      

  postgres-db:
    image: postgres:17
    environment: 
      POSTGRES_DB: ${DBNAME}
      POSTGRES_USER: ${DBUSER}
      POSTGRES_PASSWORD: ${DBPASSWORD}
    ports:
      - "5432:5432"
    env_file:
      - ".env"      
    volumes:
      - sc_postgres_data:/var/lib/postgresql/data
    networks:
      - "sc_backend_network"        

  nginx-prod:
    image: nginx:latest
    container_name: nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"    
    volumes:
      - ./nginx/prod-nginx.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt:/etc/letsencrypt      
      - /var/www/certbot:/var/www/certbot
      - ./backend/staticfiles:/backend/staticfiles
      - ./backend/media:/backend/media      
      - ./frontend/dist:/frontend/dist
    depends_on:
      - django-backend-prod
      - vuejs-frontend-prod
      - certbot
    networks:
      - "sc_backend_network"

  certbot:
    image: certbot/certbot:latest
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --keep-until-expiring --email ${DOCKER_CERTBOT_EMAIL} -d ${DOCKER_CERTBOT_DOMAIN} --agree-tos --dry-run
    # command: certonly --webroot -w /var/www/certbot --keep-until-expiring --email ${DOCKER_CERTBOT_EMAIL} -d ${DOCKER_CERTBOT_DOMAIN} --agree-tos


networks:
  sc_backend_network:
    driver: bridge

volumes:
  node_modules:
  sc_postgres_data: